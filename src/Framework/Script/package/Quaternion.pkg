
class Quaternion
{
	Quaternion(float X = 0.0f, float Y = 0.0f, float Z = 0.0f, float W = 1.0f);
    Quaternion(const Matrix4& Matrix);
    Quaternion(const CVector3<float>& Axis, float Angle);

    void Identity();
    void Normalize();
    Quaternion Conjugate() const;
    Matrix4 ToMatrix() const;
    void FromMatrix(const Matrix4& Matrix);
    void FromAxisAngle(const CVector3<float>& Axis, float Angle);
    void ToAxisAngle(CVector3<float>& Axis, float& Angle) const;

	void Transform(const CVector3<float> &value, CVector3<float> &result) const;
	void Transform(const std::vector<CVector3<float>> &sourceArray, std::vector<CVector3<float>> &destinationArray) const;

    void FromEulerAngles(float X, float Y, float Z);
    Quaternion operator *(const Quaternion& q_) const;
    //const Quaternion& operator *=(const Quaternion& q_);
};
