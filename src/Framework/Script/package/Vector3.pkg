$renaming CVector3<float> @ Vector3F
$renaming CVector3<int> @ Vector3I

class CVector3
{
	TOLUA_TEMPLATE_BIND(T, float)

	static CVector3<T> Zero();
	static CVector3<T> One();
	static CVector3<T> UnitX();
	static CVector3<T> UnitY();
	static CVector3<T> UnitZ();

	static CVector3<T> Up();
	static CVector3<T> Down();
	static CVector3<T> Right();
	static CVector3<T> Left();
	static CVector3<T> Forward();
	static CVector3<T> Backward();

	static T Dot (const CVector3<T>& v1, const CVector3<T>& v2);
	static CVector3<T> Cross(const CVector3<T>& v1, const CVector3<T>& v2);

	//static void Transform(const std::vector<CVector3<T> > &sourceArray, const Matrix4 &matrix, std::vector<CVector3<T> > &destinationArray);
	//static void Transform(const CVector3<T> &value, const Quaternion &rotation, CVector3<T> &result);
	//static void Transform(const std::vector<CVector3<T> > &sourceArray, const Quaternion &rotation, std::vector<CVector3<T> > &destinationArray);
	//static void TransformNormal(const CVector3<T> &normal, const Matrix4 &matrix, CVector3<T> &result);*/

	CVector3(T X = 0, T Y = 0, T Z = 0);
	void Set(T X, T Y, T Z);
	T getX() const;
	T getY() const;
	T getZ() const;

	bool IsZero() const;

	T Length() const;
	T LengthSquared() const;

	void Normalize();

	//CVector3<T> operator +() const;
	//CVector3<T> operator -() const;
	CVector3<T> operator +(const CVector3<T>& v) const;
	CVector3<T> operator -(const CVector3<T>& v) const;
	//const CVector3<T>& operator +=(const CVector3<T>& v);
	//const CVector3<T>& operator -=(const CVector3<T>& v);
	//const CVector3<T>& operator *=(T t);
	//const CVector3<T>& operator /=(T t);
	bool operator ==(const CVector3<T>& v) const;
	//bool operator !=(const CVector3<T>& v) const;
	//operator T*();
};
