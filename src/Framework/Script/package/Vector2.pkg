$renaming CVector2<float> @ Vector2F
$renaming CVector2<int> @ Vector2I

class CVector2
{
	TOLUA_TEMPLATE_BIND(T, int, float)

	static CVector2<T> Zero();
	static CVector2<T> One();
	static CVector2<T> UnitX();
	static CVector2<T> UnitY();

    CVector2(T X = 0, T Y = 0);

    void Set(T X, T Y);
	T getX() const;
	T getY() const;

	bool IsZero() const;

    T Length() const;
    T LengthSquared() const;
    void Normalize();

	inline float Dot(const CVector2<T>& v2)const;

	enum {clockwise = 1, anticlockwise = -1};
	inline int Sign(const CVector2<T>& v2)const;
	inline CVector2<T> Perp() const;
	inline void Truncate(float max);
	inline float Distance(const CVector2<T> &v2)const;
	inline float DistanceSq(const CVector2<T> &v2)const;
	inline void Reflect(const CVector2<T>& norm);
	inline CVector2<T>  GetReverse()const;

    //CVector2<T> operator +() const;
    //CVector2<T> operator -() const;

    CVector2<T> operator +(const CVector2<T>& v) const;
    CVector2<T> operator -(const CVector2<T>& v) const;

    //const CVector2<T>& operator +=(const CVector2<T>& v);
    //const CVector2<T>& operator -=(const CVector2<T>& v);

    CVector2<T> operator *(T t) const;
    CVector2<T> operator /(T t) const;

    //const CVector2<T>& operator *=(T t);
    //const CVector2<T>& operator /=(T t);

    bool operator ==(const CVector2<T>& v) const;
    //bool operator !=(const CVector2<T>& v) const;

    //operator T*();
};
